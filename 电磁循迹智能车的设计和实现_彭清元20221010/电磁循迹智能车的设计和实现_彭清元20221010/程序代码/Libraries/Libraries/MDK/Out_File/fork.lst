C251 COMPILER V5.60.0,  fork                                                               07/10/22  19:46:42  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE fork
OBJECT MODULE PLACED IN .\Out_File\fork.obj
COMPILER INVOKED BY: D:\Keil_v5\C251\BIN\C251.EXE fork.c XSMALL INTR2 WARNINGLEVEL(3) BROWSE INCDIR(..\..\Libraries\libr
                    -aries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\inc;..\USER\src) DEBUG PRIN
                    -T(.\Out_File\fork.lst) TABS(2) OBJECT(.\Out_File\fork.obj) 

stmt  level    source

    1              #include "headfile.h"
    2              #include "fork.h"
    3              #include "math.h"
    4          
    5              int s_flag1 = 0;
    6              int s_flag2 = 0;
    7              int s_flag3 = 0;
    8              int s_flag4 = 0;
    9              int s_flag5 = 0;
   10              
   11              int left_podao = 0;
   12              int step_podao = 0;
   13            
   14              
   15              int ente = 0;
   16          
   17              int enter_fork = 0;
   18              int duty_fork = 0;
   19              int leave_fork = 0;
   20          
   21              int cnt_fork = 1;  //第几次进三岔
   22          
   23              int in_left = 0;
   24              int in_right = 0;
   25          
   26              int fork_left = 0;
   27              int fork_right = 0;
   28          
   29              int in_forks = 0;  //标记 进入三岔
   30          
   31              int in_forks_left = 0;
   32              int in_forks_right = 0;
   33          
   34              int enter_fork_step = 0;
   35              int leave_step = 0;
   36          
   37              int sc = 1000;
   38          
   39              int maichong = 0;
   40          
   41              int switch_cnt = 0;
   42          
   43              int leave_left = 0;
   44              int leave_right = 0;
   45              int leave_pid = 0;
   46          
   47              int recording = 0;
   48              
   49              int sancha = 0;
   50              
   51              int pansancha = 0; // 出圆环 才判断 三岔
   52          
   53              void forks();
   54          
   55              void forks()
   56              {
   57   1      
C251 COMPILER V5.60.0,  fork                                                               07/10/22  19:46:42  PAGE 2   

   58   1              if( ((ad[0] + ad[1]) > (ad[4] + ad[5]))
   59   1                && ad[4] < 80 && ad[5] < 80 
   60   1                && ad[7] < 40 && ad[8] < 40 
   61   1                && s_flag1 == 0 && s_flag2 == 0 && s_flag3 == 0
   62   1                &&( maichong == 0 || maichong == 1000)
   63   1                && sc >= 1000
   64   1                && ad[9] < 70
   65   1                && ad[0] > 20 && ad[1] > 20
   66   1      //          && pansancha == 1
   67   1              ) // 预判三岔
   68   1              {
   69   2      //            buzzer(true);
   70   2                  s_flag1 = 1;
   71   2                  maichong = 0;
   72   2              }
   73   1              
   74   1      
   75   1              if(s_flag1 == 1 && s_flag2 == 0 && s_flag3 == 0 ){ //去除出界
   76   2      
   77   2                  if ( ( my_divide(ad[4],ad[5]) < 2.3  
   78   2                        &&  (ad[7] + ad[8] < 45) && (ad[0] + ad[1] > 95) 
   79   2                        && ad[6] > ad[9] * 1.1 ) && abs(s_error) < 400 && ( ad[2] + ad[3] + ad[7] + ad[8] < 95) )
   80   2                 {
   81   3                   
   82   3                   in_forks = 1;
   83   3                   
   84   3                   s_flag2 = 1;
   85   3                       
   86   3      //             buzzer(true);
   87   3                   
   88   3                   open = 1;
   89   3                   
   90   3                   sum_angle = 0;
   91   3                  
   92   3                 }
   93   2      
   94   2                 else {
   95   3      
   96   3                  s_flag1 = 0;
   97   3      
   98   3                 }
   99   2              }
  100   1              
  101   1              if(s_flag2 == 1 && s_flag3 == 0) // 判断到 了 三岔
  102   1              {
  103   2              
  104   2                buzzer(true);
  105   2                
  106   2                duty_fork = 1; // 进入三岔 大角 标志
  107   2                
  108   2                enter_fork = 1; // 进入三岔
  109   2                
  110   2                if( cnt_fork == 1)
  111   2                {
  112   3                 if(recording == 1) recording = 2;
  113   3      //         if(recording == 0) recording = 1;
  114   3                
  115   3                  switch_cnt = 1;
  116   3                  
  117   3                  maichong = 1;
  118   3                  
  119   3                  fork_left = 1; //进左边
  120   3                  
  121   3                  left_podao = 1;
  122   3                  
  123   3                  fork_right = 0;
C251 COMPILER V5.60.0,  fork                                                               07/10/22  19:46:42  PAGE 3   

  124   3                  
  125   3                  duty_ = left ;
  126   3                  
  127   3                  Servoinit();
  128   3                
  129   3                  if( sum_angle > 25)
  130   3                  {
  131   4                    
  132   4                    in_forks_left = 1;
  133   4                    
  134   4                    open = 0;
  135   4                    
  136   4                    s_flag1 = 0;
  137   4                    
  138   4                    s_flag2 = 0;
  139   4                    
  140   4                    s_flag3 = 1;
  141   4                    
  142   4                    enter_fork = 0;
  143   4                    
  144   4                    duty_fork = 0;
  145   4                    
  146   4                  }
  147   3                }
  148   2                    
  149   2                if( cnt_fork == 2)
  150   2                {
  151   3                
  152   3      //          if(recording == 1) recording = 2;
  153   3      
  154   3                  if(recording == 0) recording = 1;
  155   3                  
  156   3                  switch_cnt = 2;
  157   3                  
  158   3                  maichong = 1;
  159   3                  
  160   3                  fork_left = 0;
  161   3                  
  162   3                  fork_right = 1; //进右边
  163   3                  
  164   3                  duty_ = right - 10 ;
  165   3                  
  166   3                  Servoinit();
  167   3                  
  168   3                  ki_l = 20;
  169   3                  ki_r = 20;
  170   3                  
  171   3                  Servoinit();
  172   3      
  173   3      //            if( sum_angle < -20 )
  174   3      ////            if(sum_angle < -20 || ((ad[0] + ad[1] < 70) && (ad[0] + ad[1] > 35) && (ad[2]<15 && ad[3] <15))
             -)
  175   3      //            {
  176   3      
  177   3                  if( sum_angle < -20 
  178   3      //            || ((ad[0] + ad[1] + ad[4] + ad[5] > 150) && (ad[0] + ad[1] + ad[4] + ad[5] < 190) && my_divide(a
             -d[6],ad[9]) < 1.5) && ad[9] > 25
  179   3                  )
  180   3      //            if(sum_angle < -20 || ((ad[0] + ad[1] < 70) && (ad[0] + ad[1] > 35) && (ad[2]<15 && ad[3] <15)))
  181   3                  {
  182   4      
  183   4                    in_forks_right = 1; 
  184   4                    
  185   4                    s_flag1 = 0;
  186   4                    
  187   4                    s_flag2 = 0;
C251 COMPILER V5.60.0,  fork                                                               07/10/22  19:46:42  PAGE 4   

  188   4                    
  189   4                    s_flag3 = 1;
  190   4                    
  191   4                    enter_fork = 0;
  192   4                    
  193   4                    duty_fork = 0;
  194   4                    
  195   4                    open = 0;
  196   4                            
  197   4                    ki_l = 1;
  198   4                    ki_r = 1;
  199   4                    
  200   4                  }
  201   3                }
  202   2            }
  203   1              
  204   1              if(s_flag3 == 1 && s_flag4 == 0)
  205   1              {
  206   2                
  207   2                ente = ente + (nowspeed_L + nowspeed_R) / 2;
  208   2                
  209   2                if(ente > 1000) {
  210   3                  ente = 1000;
  211   3                }
  212   2                //在三岔内部
  213   2                
  214   2                cir_sancha = 0;
  215   2                
  216   2                if(fork_left == 1 && fork_right == 0)
  217   2                {
  218   3                  cnt_fork = 2;
  219   3                }
  220   2                
  221   2                if(fork_right == 1 && fork_left == 0)
  222   2                {
  223   3                  cnt_fork = 1;
  224   3                }
  225   2                
  226   2      //        if( ((ad[4] > 70 || ad[5] > 70) || (ad[4] +  ad[5]) > 170)
  227   2      //            && fork_left == 1 ) 
  228   2      //        if( ((ad[4] > 65 && ad[5] > 65) || (ad[4] +  ad[5]) > 140)
  229   2      //            && fork_left == 1 ) 
  230   2      
  231   2                if((((ad[0] > 75 || ad[1] > 75) 
  232   2                  || (ad[0] + ad[1] + ad[4] + ad[5])> 340
  233   2                  || ad[0] > 150
  234   2                  || ad[1] > 150 
  235   2                  || ad[4] > 150 
  236   2                  || ad[5] > 150)  && fork_left == 1 && step_podao == 10000) 
  237   2                  && ente == 1000 && flag_po)
  238   2              {
  239   3              
  240   3                  step_podao = 0;
  241   3                  left_podao = 0;
  242   3                  cir_sancha = 0; //清空三岔 圆环 之间的pid
  243   3                  ente = 0;
  244   3                  buzzer(false);
  245   3                  maichong = 0;
  246   3                  sc = 0;
  247   3                  
  248   3                  open = 0;
  249   3      
  250   3                  s_flag1 = 0;
  251   3                  s_flag2 = 0;
  252   3                  s_flag3 = 0;
  253   3                  s_flag4 = 0;
C251 COMPILER V5.60.0,  fork                                                               07/10/22  19:46:42  PAGE 5   

  254   3      
  255   3                  enter_fork = 0;
  256   3                  duty_fork = 0;
  257   3                  leave_fork = 0;
  258   3                  
  259   3                  in_left = 0;
  260   3                  in_right = 0;
  261   3      
  262   3                  fork_left = 0;
  263   3                  fork_right = 0;
  264   3      
  265   3                  in_forks = 0;  //标记 进入三岔
  266   3      
  267   3                  in_forks_left = 0;
  268   3                  in_forks_right = 0;
  269   3                  
  270   3                  leave_step = 0; 
  271   3                  ki_l = 1;
  272   3                  ki_r = 1;   
  273   3                  
  274   3                  pansancha = 0;
  275   3      
  276   3                  flag_po = 0;
  277   3                  ki_l = 1;
  278   3                  ki_r = 1;
  279   3                  in_normall_speed = speed_yuan;        
  280   3                  
  281   3              }
  282   2                 
  283   2      //          if(((ad[0] > 75 || ad[1] > 75) 
  284   2      //            || (ad[0] + ad[1] + ad[4] + ad[5])> 360
  285   2      //            || ad[0] > 150
  286   2      //            || ad[1] > 150 
  287   2      //            || ad[4] > 150 
  288   2      //            || ad[5] > 150)  && fork_right == 1) 
  289   2                if((((ad[0] > 70 && ad[1] > 70) 
  290   2                  || (ad[0] + ad[1] + ad[4] + ad[5])> 320
  291   2                  || ad[0] > 140
  292   2                  || ad[1] > 140 
  293   2                  || ad[4] > 140 
  294   2                  || ad[5] > 140)  && fork_right == 1) 
  295   2                  && ente == 1000)
  296   2      
  297   2                  {
  298   3                    cir_sancha = 0; //清空三岔 圆环 之间的pid
  299   3                    ente = 0;
  300   3                    leave_pid = 1;
  301   3                  
  302   3                    leave_right = 1;
  303   3                    
  304   3                    buzzer(false);
  305   3                    maichong = 0;
  306   3                    sc = 0;
  307   3                    open = 0;
  308   3      
  309   3                    s_flag1 = 0;
  310   3                    s_flag2 = 0;
  311   3                    s_flag3 = 0;
  312   3                    s_flag4 = 0;
  313   3      
  314   3                    enter_fork = 0;
  315   3                    duty_fork = 0;
  316   3                    leave_fork = 0;
  317   3                    
  318   3                    in_left = 0;
  319   3                    in_right = 0;
C251 COMPILER V5.60.0,  fork                                                               07/10/22  19:46:42  PAGE 6   

  320   3      
  321   3                    fork_left = 0;
  322   3                    fork_right = 0;
  323   3      
  324   3                    in_forks = 0;  //标记 进入三岔
  325   3      
  326   3                    in_forks_left = 0;
  327   3                    in_forks_right = 0;
  328   3                    
  329   3                    leave_step = 0; 
  330   3                    ki_l = 1;
  331   3                    ki_r = 1;
  332   3                    
  333   3                    pansancha = 0;
  334   3                    cheku_flag1 = 1;    
  335   3      
  336   3                  
  337   3                }
  338   2              }
  339   1          }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1403     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        60     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       180     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
